<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:repository="http://www.springframework.org/schema/data/repository"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-2.0.xsd
		http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository-2.1.xsd">


	<context:component-scan base-package="job" />

	<bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	<!-- controller registration -->

	<bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" />

	<bean
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions" value="/WEB-INF/tiles/*.xml" />
	</bean>


	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- injecting bean register / 기본생성자로 생성시켜 관리에 들어가게 된다. -->
	<bean id="gson" class="com.google.gson.Gson" />

	<!-- mybatis bridge bean register -->

	<bean id="ds"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />

		<property name="url"
			value="jdbc:oracle:thin:@naagle.mockingu.com:1521:xe" />

		<property name="username" value="project" />
		<property name="password" value="oracle" />
	</bean>
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds"></property>
		<property name="mapperLocations"
			value="/WEB-INF/mappers/*.xml"></property>
	</bean>
	<bean id="sqlTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory"></constructor-arg>


	</bean>

	<!-- multipart resolver add id="multipartResolver" -->
	<bean
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		id="multipartResolver"></bean>


	<!-- <mongo:mongo-client host="54.180.30.243" port="40728"></mongo:mongo-client> 
		<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"> 
		<constructor-arg name="mongoClient" ref="mongoClient" /> <constructor-arg 
		name="databaseName" value="dev" /> </bean> -->

	<mongo:mongo-client host="naagle.mockingu.com"
		port="10004" />
	<bean id="mongoTemplate"
		class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoClient" ref="mongoClient" /><!-- 
			이름은 고정임 -->
		<constructor-arg name="databaseName" value="dev" />
	</bean>

	<bean class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="54.180.8.185" />
		<property name="port" value="25" />
		<property name="protocol" value="smtp" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<websocket:handlers>


		<websocket:mapping handler="serviceController"
			path="/conn.do" />
		<websocket:mapping handler="chatController"
			path="/chat.do" />

		<websocket:mapping handler="totalController"
			path="/total.do" />

		<websocket:handshake-interceptors>
			<bean
				class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"></bean>
		</websocket:handshake-interceptors>
	</websocket:handlers>
</beans>
